name: Build and Release AppStore

on:
  push:
    branches: [ main ]
    paths:
      - 'Apps/**'
      - '*.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'Apps/**'
      - '*.json'
  workflow_dispatch:

jobs:
  validate:
    name: Validate Apps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install validation tools
        run: |
          pip install pyyaml

      - name: Validate Docker Compose files
        run: |
          echo "üîç Validating Docker Compose files..."
          python3 << 'EOF'
          import yaml
          import os
          import sys
          from pathlib import Path

          errors = []

          for compose_file in Path("Apps").rglob("docker-compose.yml"):
              print(f"Validating: {compose_file}")
              try:
                  with open(compose_file, 'r') as f:
                      data = yaml.safe_load(f)

                  # Check basic structure
                  if not isinstance(data, dict):
                      errors.append(f"‚ùå {compose_file}: Invalid YAML structure")
                      continue

                  # Check for services section
                  if 'services' not in data:
                      errors.append(f"‚ùå {compose_file}: Missing 'services' section")
                      continue

                  # Check for x-casaos section
                  if 'x-casaos' not in data:
                      errors.append(f"‚ùå {compose_file}: Missing 'x-casaos' section")
                      continue

                  # Check required x-casaos fields
                  x_casaos = data['x-casaos']
                  required_fields = ['architectures', 'main', 'author', 'category', 'description', 'title']

                  for field in required_fields:
                      if field not in x_casaos:
                          errors.append(f"‚ùå {compose_file}: Missing required x-casaos field: {field}")

                  print(f"‚úÖ {compose_file} is valid")

              except yaml.YAMLError as e:
                  errors.append(f"‚ùå {compose_file}: YAML syntax error: {e}")
              except Exception as e:
                  errors.append(f"‚ùå {compose_file}: Error: {e}")

          if errors:
              for error in errors:
                  print(error)
              sys.exit(1)
          else:
              print("‚úÖ All Docker Compose files are valid")
          EOF

      - name: Validate JSON files
        run: |
          echo "üîç Validating JSON files..."
          for file in *.json; do
            if [ -f "$file" ]; then
              echo "Validating: $file"
              python3 -m json.tool "$file" > /dev/null
              if [ $? -eq 0 ]; then
                echo "‚úÖ $file is valid JSON"
              else
                echo "‚ùå $file is invalid JSON"
                exit 1
              fi
            fi
          done

      - name: Check required files
        run: |
          echo "üîç Checking required files for each app..."
          find Apps -maxdepth 1 -mindepth 1 -type d | while read app_dir; do
            app_name=$(basename "$app_dir")
            echo "Checking app: $app_name"

            # Check required files
            required_files=("docker-compose.yml" "icon.png" "screenshot-1.png")
            for file in "${required_files[@]}"; do
              if [ ! -f "$app_dir/$file" ]; then
                echo "‚ùå Missing required file: $app_dir/$file"
                exit 1
              else
                echo "‚úÖ Found: $app_dir/$file"
              fi
            done
          done

  build-zip:
    name: Build ZIP Release
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, if no tags exist, start with v1.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Increment patch version
          if [[ $LATEST_TAG == v*.*.* ]]; then
            IFS='.' read -r major minor patch <<< "${LATEST_TAG#v}"
            NEW_PATCH=$((patch + 1))
            NEW_TAG="v${major}.${minor}.${NEW_PATCH}"
          else
            NEW_TAG="v1.0.0"
          fi
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New tag will be: $NEW_TAG"

      - name: Build individual app ZIPs
        run: |
          echo "üì¶ Building individual app ZIPs..."
          mkdir -p dist/apps

          find Apps -maxdepth 1 -mindepth 1 -type d | while read app_dir; do
            app_name=$(basename "$app_dir")
            echo "Building ZIP for: $app_name"

            # Create ZIP for individual app
            cd "$app_dir"
            zip -r "../../dist/apps/${app_name}.zip" . -x "*.git*"
            cd ../..

            echo "‚úÖ Created: dist/apps/${app_name}.zip"
          done

      - name: Build complete AppStore ZIP
        run: |
          echo "üì¶ Building complete AppStore ZIP..."

          # Create main AppStore ZIP with all files except .git
          zip -r "dist/casaos-tailscale-appstore.zip" . -x "*.git*" "dist/*" ".github/*"

          echo "‚úÖ Created: dist/casaos-tailscale-appstore.zip"

      - name: Generate checksums
        run: |
          echo "üîê Generating checksums..."
          cd dist
          find . -name "*.zip" -type f -exec sha256sum {} \; > checksums.txt
          echo "‚úÖ Generated checksums.txt"

      - name: Create Release Notes
        run: |
          echo "üìù Creating release notes..."
          cat > dist/RELEASE_NOTES.md << EOF
          # Tailscale CasaOS AppStore Release ${{ steps.get_tag.outputs.new_tag }}

          ## üì± Applications Included

          $(find Apps -maxdepth 1 -mindepth 1 -type d | while read app_dir; do
            app_name=$(basename "$app_dir")
            echo "- **$app_name**: Available as individual ZIP and in complete AppStore"
          done)

          ## üì¶ Download Options

          - **Complete AppStore**: \`casaos-tailscale-appstore.zip\` - Add entire store to CasaOS
          - **Individual Apps**: Download specific app ZIPs from the apps folder

          ## üöÄ Installation

          ### Method 1: Complete AppStore
          1. Download \`casaos-tailscale-appstore.zip\`
          2. Add URL to CasaOS: \`https://raw.githubusercontent.com/WillianQuintino/casaos-tailscale-appstore/main\`

          ### Method 2: Individual Apps
          1. Download specific app ZIP
          2. Import manually in CasaOS

          ## üîê Verification

          All files include SHA256 checksums for integrity verification.

          ## üìÖ Build Information

          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.new_tag }}
          name: Release ${{ steps.get_tag.outputs.new_tag }}
          body_path: dist/RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            dist/*.zip
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest release
        run: |
          echo "üìù Updating README with latest release info..."

          # Update README.md with latest release information
          sed -i "s|Latest Release: .*|Latest Release: [${{ steps.get_tag.outputs.new_tag }}](https://github.com/WillianQuintino/casaos-tailscale-appstore/releases/tag/${{ steps.get_tag.outputs.new_tag }})|g" README.md || echo "No previous release info found"

          # Add release info if not present
          if ! grep -q "Latest Release:" README.md; then
            sed -i '1s/^/Latest Release: [${{ steps.get_tag.outputs.new_tag }}](https:\/\/github.com\/WillianQuintino\/casaos-tailscale-appstore\/releases\/tag\/${{ steps.get_tag.outputs.new_tag }})\n\n/' README.md
          fi

      - name: Commit README updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "üìù Update README with release ${{ steps.get_tag.outputs.new_tag }} [skip ci]"
            git push
          fi

  notify:
    name: Notify Build Status
    needs: [validate, build-zip]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Build Success Notification
        if: needs.build-zip.result == 'success'
        run: |
          echo "üéâ Build completed successfully!"
          echo "‚úÖ All apps validated"
          echo "üì¶ ZIP files created"
          echo "üöÄ Release published"

      - name: Build Failure Notification
        if: needs.validate.result == 'failure' || needs.build-zip.result == 'failure'
        run: |
          echo "‚ùå Build failed!"
          if [ "${{ needs.validate.result }}" == "failure" ]; then
            echo "üîç Validation stage failed"
          fi
          if [ "${{ needs.build-zip.result }}" == "failure" ]; then
            echo "üì¶ ZIP build stage failed"
          fi
          exit 1
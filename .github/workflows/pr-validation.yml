name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            Apps/**
            *.json

      - name: List changed files
        run: |
          echo "Changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install validation tools
        run: |
          pip install pyyaml

      - name: Validate Docker Compose syntax
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "üîç Validating Docker Compose files..."

          # Create Python script to validate changed Docker Compose files
          cat > validate_compose.py << 'EOF'
          import yaml
          import sys
          import os

          changed_files = "${{ steps.changed-files.outputs.all_changed_files }}".split()
          errors = []

          for file in changed_files:
              if file.endswith("docker-compose.yml") and os.path.exists(file):
                  print(f"Validating: {file}")

                  try:
                      with open(file, 'r') as f:
                          data = yaml.safe_load(f)

                      # Check basic structure
                      if not isinstance(data, dict):
                          errors.append(f"‚ùå {file}: Invalid YAML structure")
                          continue

                      # Check for services section
                      if 'services' not in data:
                          errors.append(f"‚ùå {file}: Missing 'services' section")
                          continue

                      # Check for x-casaos section
                      if 'x-casaos' not in data:
                          errors.append(f"‚ùå {file}: Missing 'x-casaos' section")
                          continue

                      # Check required x-casaos fields
                      x_casaos = data['x-casaos']
                      required_fields = ['architectures', 'main', 'author', 'category', 'description', 'title']

                      for field in required_fields:
                          if field not in x_casaos:
                              errors.append(f"‚ùå {file}: Missing required x-casaos field: {field}")

                      print(f"‚úÖ {file} has valid syntax and x-casaos configuration")

                  except yaml.YAMLError as e:
                      errors.append(f"‚ùå {file}: YAML syntax error: {e}")
                  except Exception as e:
                      errors.append(f"‚ùå {file}: Error: {e}")

          if errors:
              for error in errors:
                  print(error)
              sys.exit(1)
          else:
              print("‚úÖ All Docker Compose files are valid")
          EOF

          python3 validate_compose.py

      - name: Validate JSON syntax
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "üîç Validating JSON files..."

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == *.json ]]; then
              echo "Validating: $file"

              if [ -f "$file" ]; then
                python3 -m json.tool "$file" > /dev/null
                if [ $? -eq 0 ]; then
                  echo "‚úÖ $file has valid JSON syntax"
                else
                  echo "‚ùå $file has invalid JSON syntax"
                  exit 1
                fi
              fi
            fi
          done

      - name: Check app structure
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "üîç Checking app directory structure..."

          # Find apps that were modified
          modified_apps=()
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == Apps/* ]]; then
              app_name=$(echo "$file" | cut -d'/' -f2)
              if [[ ! " ${modified_apps[@]} " =~ " ${app_name} " ]]; then
                modified_apps+=("$app_name")
              fi
            fi
          done

          # Validate each modified app
          for app in "${modified_apps[@]}"; do
            app_dir="Apps/$app"
            echo "Checking app: $app"

            if [ -d "$app_dir" ]; then
              # Check required files
              required_files=("docker-compose.yml" "icon.png" "screenshot-1.png")
              for file in "${required_files[@]}"; do
                if [ ! -f "$app_dir/$file" ]; then
                  echo "‚ùå Missing required file: $app_dir/$file"
                  exit 1
                else
                  echo "‚úÖ Found: $app_dir/$file"
                fi
              done

              # Check app name format
              if [[ ! $app =~ ^[a-z0-9][a-z0-9_-]*$ ]]; then
                echo "‚ùå Invalid app name format: $app"
                echo "App names must match ^[a-z0-9][a-z0-9_-]*$"
                exit 1
              fi

              echo "‚úÖ App $app structure is valid"
            fi
          done

      - name: Validate language codes
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "üîç Validating language codes..."

          # Check for correct language codes in changed files
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [ -f "$file" ] && [[ $file == *.yml || $file == *.json ]]; then
              # Check for old language codes (en, pt) instead of (en_US, pt_BR)
              if grep -q '"en":' "$file" && ! grep -q '"en_US":' "$file"; then
                echo "‚ùå $file uses old language code 'en', should be 'en_US'"
                exit 1
              fi

              if grep -q '"pt":' "$file" && ! grep -q '"pt_BR":' "$file"; then
                echo "‚ùå $file uses old language code 'pt', should be 'pt_BR'"
                exit 1
              fi

              # Check YAML files for language codes
              if [[ $file == *.yml ]]; then
                if grep -q 'en:' "$file" && ! grep -q 'en_US:' "$file"; then
                  echo "‚ùå $file uses old language code 'en:', should be 'en_US:'"
                  exit 1
                fi

                if grep -q 'pt:' "$file" && ! grep -q 'pt_BR:' "$file"; then
                  echo "‚ùå $file uses old language code 'pt:', should be 'pt_BR:'"
                  exit 1
                fi
              fi
            fi
          done

          echo "‚úÖ Language codes are valid"

      - name: Security scan
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "üîí Running security scan..."

          # Check for suspicious patterns in Docker Compose files
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == *"docker-compose.yml" ]] && [ -f "$file" ]; then
              # Check for potentially dangerous configurations
              if grep -qi "privileged.*true" "$file" && ! grep -qi "tailscale" "$file"; then
                echo "‚ö†Ô∏è  $file uses privileged mode - please ensure this is necessary"
              fi

              if grep -qi "/var/run/docker.sock" "$file" && ! grep -qi "container.*discovery\|docker.*management" "$file"; then
                echo "‚ö†Ô∏è  $file mounts Docker socket - please ensure this is necessary"
              fi

              # Check for host network mode
              if grep -qi "network_mode.*host" "$file"; then
                echo "‚ö†Ô∏è  $file uses host network mode - please ensure this is necessary"
              fi
            fi
          done

          echo "‚úÖ Security scan completed"

      - name: PR Summary
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "üìã Pull Request Validation Summary"
          echo "================================="
          echo "‚úÖ Docker Compose syntax validation passed"
          echo "‚úÖ JSON syntax validation passed"
          echo "‚úÖ App structure validation passed"
          echo "‚úÖ Language codes validation passed"
          echo "‚úÖ Security scan completed"
          echo ""
          echo "üéâ All validations passed! PR is ready for review."

      - name: Comment PR
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üéâ **Validation Passed!** \n\n‚úÖ All checks completed successfully:\n- Docker Compose syntax ‚úÖ\n- JSON syntax ‚úÖ\n- App structure ‚úÖ\n- Language codes ‚úÖ\n- Security scan ‚úÖ\n\nYour PR is ready for review!'
            })